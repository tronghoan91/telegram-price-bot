import logging
import requests
import re
from bs4 import BeautifulSoup
from googlesearch import search
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask, request
import os
import asyncio

BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
app = Flask(__name__)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

SUPPORTED_SITES = {
    'nguyenkim': 'nguyenkim.com',
    'hc': 'hc.com.vn',
    'eco': 'eco-mart.vn',
    'dienmaycholon': 'dienmaycholon.vn',
    'pico': 'pico.vn'
}

def extract_price_and_promo(soup, domain):
    price = None
    promo = None
    text = soup.get_text(separator=" ", strip=True)

    if "pico.vn" in domain:
        price_tag = soup.select_one("div.product-price ins") or soup.select_one("div.product-price")
        if price_tag:
            price = price_tag.get_text(strip=True)

    elif "nguyenkim.com" in domain:
        price_tag = soup.find("div", class_="product-price")
        if price_tag:
            match = re.search(r"\d[\d\.\,]+‚Ç´", price_tag.get_text())
            if match:
                price = match.group()

    elif "hc.com.vn" in domain:
        match = re.findall(r"\d[\d\.\,]+(?:‚Ç´|ƒë| VNƒê| vnƒë)?", text)
        price = match[0] if match else None

    elif "dienmaycholon.vn" in domain:
        price_tag = soup.select_one(".price, .product-price, .box-price")
        if price_tag:
            price = price_tag.get_text(strip=True)

    elif "eco-mart.vn" in domain:
        price_tag = soup.select_one("span.price, div.price, p.price")
        if price_tag:
            price = price_tag.get_text(strip=True)

    # Khuy·∫øn m√£i
    match = re.findall(r"(t·∫∑ng|gi·∫£m|∆∞u ƒë√£i|qu√† t·∫∑ng)[^.:\\n]{0,100}", text, re.IGNORECASE)
    promo = match[0] if match else None

    if price:
        digits = re.sub(r"[^\d]", "", price)
        if digits:
            price = f"{int(digits):,}ƒë".replace(",", ".")

    return price, promo.strip() if promo else None

def get_product_info(query, source_key):
    domain = SUPPORTED_SITES.get(source_key)
    if not domain:
        return "‚ùå Kh√¥ng h·ªó tr·ª£ ngu·ªìn n√†y."

    try:
        urls = list(search(f"{query} site:{domain}", num_results=5))
        url = next((u for u in urls if domain in u), None)
        if not url:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m tr√™n {domain}"

        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(resp.text, "html.parser")

        if "pico.vn" in domain:
            title_tag = soup.find("h1", class_="product-title")
        elif "hc.com.vn" in domain:
            title_tag = soup.find("h1", class_="product-title")
        elif "nguyenkim.com" in domain:
            title_tag = soup.find("h1", class_=re.compile("product-name|product-title"))
        else:
            title_tag = soup.find("h1")

        title = title_tag.text.strip() if title_tag else query
        price, promo = extract_price_and_promo(soup, domain)

        msg = f"<b>‚úÖ {title}</b>"
        if price:
            msg += f"\nüí∞ <b>Gi√°:</b> {price}"
        else:
            if "hc.com.vn" in domain:
                msg += "\n‚ùó Kh√¥ng th·ªÉ tr√≠ch xu·∫•t gi√° t·ª´ HC v√¨ gi√° hi·ªÉn th·ªã b·∫±ng JavaScript."
            else:
                msg += "\n‚ùå Kh√¥ng t√¨m th·∫•y gi√° r√µ r√†ng."

        if promo:
            msg += f"\n\nüéÅ <b>KM:</b> {promo}"
        msg += f'\nüîó <a href="{url}">Xem s·∫£n ph·∫©m</a>'
        return msg

    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã G·ª≠i t√™n s·∫£n ph·∫©m ho·∫∑c nh·∫≠p theo c√∫ ph√°p <code>nguon:t√™n s·∫£n ph·∫©m</code>\n"
        "V√≠ d·ª•: <code>hc:t·ªß l·∫°nh LG</code> ho·∫∑c <b>Magic A-030</b> ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c s√†n.",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if ':' in text:
        source_key, query = text.split(':', 1)
        source_key = source_key.strip().lower()
        query = query.strip()
        await update.message.reply_text(f"üîç ƒêang t√¨m <b>{query}</b> tr√™n <b>{source_key}</b>...", parse_mode="HTML")
        result = get_product_info(query, source_key)
        await update.message.reply_text(result, parse_mode="HTML")
    else:
        query = text
        await update.message.reply_text(f"üîç ƒêang t√¨m <b>{query}</b> tr√™n t·∫•t c·∫£ c√°c s√†n...", parse_mode="HTML")
        for source_key in SUPPORTED_SITES:
            try:
                result = get_product_info(query, source_key)
                await update.message.reply_text(f"<b>üõçÔ∏è {source_key.upper()}</b>\n{result}", parse_mode="HTML")
            except Exception as e:
                await update.message.reply_text(f"‚ùå {source_key.upper()}: L·ªói khi t√¨m s·∫£n ph·∫©m\n{str(e)}", parse_mode="HTML")

telegram_app = Application.builder().token(BOT_TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

@app.route("/", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)

    async def process():
        await telegram_app.initialize()
        await telegram_app.process_update(update)
        await telegram_app.shutdown()

    asyncio.run(process())
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
