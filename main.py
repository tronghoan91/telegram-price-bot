import os
import logging
import requests
import re
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask, request
import asyncio

# --- C·∫•u h√¨nh ---
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")
app = Flask(__name__)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- C√°c ngu·ªìn h·ªó tr·ª£ ---
SUPPORTED_SITES = {
    'nguyenkim': 'nguyenkim.com',
    'hc': 'hc.com.vn',
    'eco': 'eco-mart.vn',
    'cholon': 'dienmaycholon.vn',
    'pico': 'pico.vn',
    'shopee': 'shopee.vn',
    'mediamart': 'mediamart.vn',
    'dmx': 'dienmayxanh.com'
}

# --- H√†m tr√≠ch xu·∫•t gi√° & khuy·∫øn m√£i ---
def extract_price_and_promo(soup, domain):
    text = soup.get_text(separator=" ", strip=True)
    price = None
    promo = None

    # C·ªê ƒê·ªäNH v√†i site
    if "nguyenkim.com" in domain:
        tag = soup.select_one("div.product-price, div.price, span.price")
        price = tag.get_text(strip=True) if tag else None
    elif "eco-mart.vn" in domain or "mediamart.vn" in domain:
        tag = soup.select_one("span.price, .woocommerce-Price-amount")
        price = tag.get_text(strip=True) if tag else None
    elif "dienmaycholon.vn" in domain or "dienmayxanh.com" in domain:
        tag = soup.select_one(".price, .product-price")
        price = tag.get_text(strip=True) if tag else None
    elif "pico.vn" in domain:
        tag = soup.select_one(".product-detail-price, .price, .product-price")
        price = tag.get_text(strip=True) if tag else None
    # Shopee th∆∞·ªùng hi·ªÉn th·ªã b·∫±ng JS, d√πng regex fallback
    # C√°c site kh√°c d√πng chung regex
    if not price:
        m = re.findall(r"\d[\d\.]{3,}(?:‚Ç´|ƒë| VNƒê| vnƒë)", text)
        price = m[0] if m else None

    # Khuy·∫øn m√£i
    m2 = re.findall(r"(t·∫∑ng|gi·∫£m|∆∞u ƒë√£i|qu√† t·∫∑ng)[^.:\n]{0,100}", text, re.IGNORECASE)
    promo = m2[0].strip() if m2 else None

    # Tinh ch·ªânh l·∫°i
    if price:
        mp = re.match(r'(\d[\d\.]+[ƒë‚Ç´])\s*(.*)', price)
        if mp:
            price = mp.group(1)
            extra = mp.group(2).strip()
            if extra:
                promo = (promo or "") + " " + extra

    return price, promo

# --- L·∫•y th√¥ng tin s·∫£n ph·∫©m ---
def get_product_info(query, source_key):
    domain = SUPPORTED_SITES.get(source_key)
    if not domain:
        return "‚ùå Ngu·ªìn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."

    # Google search 5 k·∫øt qu·∫£
    try:
        from googlesearch import search
        urls = list(search(f"{query} site:{domain}", num_results=5))
    except ImportError:
        urls = []
    url = next((u for u in urls if domain in u), None)
    if not url:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y tr√™n {domain}"

    # Request & parse
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers, timeout=10)
    soup = BeautifulSoup(r.text, "html.parser")

    # T√™n s·∫£n ph·∫©m: h1 ho·∫∑c og:title ho·∫∑c query
    tag = soup.find("h1")
    if tag:
        title = tag.get_text(strip=True)
    else:
        og = soup.find("meta", property="og:title")
        title = og["content"].strip() if og and og.get("content") else query

    # Gi√° & KM
    price, promo = extract_price_and_promo(soup, domain)

    # X√¢y message
    msg = f"‚úÖ *{title}*"
    if price:
        msg += f"\nüí∞ *Gi√°:* {price}"
    else:
        msg += "\n‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c gi√°."
    msg += f"\nüéÅ *KM:* {promo or 'Kh√¥ng r√µ'}"
    msg += f'\nüîó [Xem s·∫£n ph·∫©m]({url})'

    return msg

# --- Handler /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã G·ª≠i tin nh·∫Øn theo c√∫ ph√°p `nguon:t√™n s·∫£n ph·∫©m`, v√≠ d·ª•:\n"
        "`nguyenkim:AC-305`, `hc:qu·∫°t h∆°i n∆∞·ªõc`, `pico:Magic A-030`",
        parse_mode="Markdown"
    )

# --- Handler tin nh·∫Øn ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if ':' not in txt:
        return await update.message.reply_text(
            "‚ùó Vui l√≤ng nh·∫≠p `nguon:t√™n s·∫£n ph·∫©m`",
            parse_mode="Markdown"
        )
    key, query = txt.split(':', 1)
    key, query = key.lower().strip(), query.strip()
    await update.message.reply_text(f"üîç ƒêang t√¨m *{query}* tr√™n *{key}*...", parse_mode="Markdown")
    res = get_product_info(query, key)
    await update.message.reply_text(res, parse_mode="Markdown", disable_web_page_preview=True)

# --- Kh·ªüi t·∫°o Telegram app ---
telegram_app = Application.builder().token(BOT_TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# --- Flask routes ƒë·ªÉ Gunicorn g·ªçi ---
@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

@app.route("/", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    async def process(): 
        await telegram_app.initialize()
        await telegram_app.process_update(update)
        await telegram_app.shutdown()
    asyncio.run(process())
    return "OK", 200

# --- Entrypoint cho local/testing ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
